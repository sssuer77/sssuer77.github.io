<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>ssuer77的博客</title><link>https://sssuer77.github.io</link><description>一个个人博客，记录学习。</description><copyright>ssuer77的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/178136927?v=4</url><title>avatar</title><link>https://sssuer77.github.io</link></image><lastBuildDate>Tue, 11 Mar 2025 10:22:24 +0000</lastBuildDate><managingEditor>ssuer77的博客</managingEditor><ttl>60</ttl><webMaster>ssuer77的博客</webMaster><item><title>最短路</title><link>https://sssuer77.github.io/post/zui-duan-lu.html</link><description>&lt;a href='https://blog.csdn.net/wmy0217_/article/details/105438163' target='_blank'&gt;
推荐博客
&lt;/a&gt;

![Image](https://github.com/user-attachments/assets/826a944c-e693-4041-9195-7f99c3cd07c8)

# 朴素Dijkstra
时间复杂度为O(n^2)
核心代码：
```cpp
for(int i=0; i&lt;n; i++)
	{
		int t = -1;
		for(int j=1; j&lt;=n; j++)   // 在没有确定最短路中的所有点找出距离最短的那个点 t 
		   if(!st[j] &amp;&amp; (t == -1 || dist[t] &gt; dist[j]))
		    t=j;                  
		    
		st[t]=true; // 代表 t 这个点已经确定最短路了
		
		for(int j=1; j&lt;=n; j++) // 用 t 更新其他点的最短距离 
		 dist[j] = min(dist[j],dist[t]+g[t][j]);
	 } 
```
# 堆优化Dijkstra
时间复杂度O(nlogn+m)
模板：
```cpp
#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;queue&gt;
using namespace std;
typedef pair&lt;int,int&gt; PII; //first存距离，second存结点编号 
const int N = 2e5+10;
int n,m;
int h[N],w[N],e[N],ne[N],idx; // 邻接表的存储 
int dist[N]; // 第 i 个点到起点的最短距离
bool st[N]; // 代表第 i 个点的最短路是否确定、是否需要更新 

void add(int a,int b,int c)
{
	e[idx] = b,w[idx] = c,ne[idx] = h[a],h[a] = idx++;
}

int dijkstra()
{
	memset(dist,0x3f,sizeof(dist)); // 将所有距离初始化正无穷
	dist[1] = 0;  // 第一个点到起点的距离为 0  
	
	priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; // 小根堆
	heap.push({0,1}); //把 1 号点放入堆中 
	
	while(heap.size()) // 堆不空
	{
	   	PII t = heap.top(); //找到当前距离最小的点
		heap.pop();
		
		int ver = t.second,distance = t.first; // ver为编号，distance为距离
		if(st[ver]) continue;   // 重边的话不用更新其他点了
		st[ver] = true;   //标记 t 已经确定最短路
		
		for(int i = h[ver]; i!=-1; i=ne[i])  // 用 t 更新其他点的最短距离
		{
			int j = e[i];
			if(dist[j] &gt; distance + w[i])
			{
				dist[j] = distance + w[i];
				heap.push({dist[j],j}); //入堆
			}
		}
	}  
	 
	if(dist[n] == 0x3f3f3f3f) return -1;  // 说明 1 和 n 是不连通的，不存在最短路 
	return dist[n];
}
int main()
{
	memset(h,-1,sizeof(h));
	cin &gt;&gt; n &gt;&gt; m;
	while(m--)
	{
		int a,b,c;
		scanf('%d%d%d',&amp;a,&amp;b,&amp;c);
		add(a,b,c);
	}
	cout &lt;&lt; dijkstra(); 
	return 0;
}
```
# Bellman-Ford
时间复杂度O(nm)
模板：
```cpp
#include&lt;cstring&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
const int N = 510,M = 10010;

int n,m,k;
int dist[N],backup[N]; //backup数组为上次
struct edges
{
   	int a,b,w; // a-&gt;b权值为w的边 
}edge[M];

int bellman_ford()
{
	memset(dist,0x3f,sizeof(dist));
	dist[1] = 0;
	
	for(int i=0; i&lt;k; i++) 
	{
		memcpy(backup,dist,sizeof(dist)); //备份
		for(int j=0; j&lt;m; j++)   // 枚举所有边 
		{
		   int a = edge[j].a, b = edge[j].b, w=edge[j].w;	
		   dist[b] = min(dist[b],backup[a]+w); // 用备份更新 
		}
	}
	if(dist[n] &gt; 0x3f3f3f3f/2) return -1;
	return dist[n];
}
int main()
{
    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;
	for(int i=0; i&lt;m; i++)
	{
	   int a,b,w;
	   cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;
	   edge[i] = {a,b,w}; 	
	}	
	int t = bellman_ford();
	
	if(t == -1) cout &lt;&lt; 'impossible';
	else cout &lt;&lt; t;
	return 0;
} 
```
# SPFA
是对Bellman-Ford的优化，但是最坏情况下依然是O(nm)的时间复杂度。</description><guid isPermaLink="true">https://sssuer77.github.io/post/zui-duan-lu.html</guid><pubDate>Tue, 11 Mar 2025 10:22:02 +0000</pubDate></item><item><title>bits/stdc++.h</title><link>https://sssuer77.github.io/post/bits-stdc%2B%2B.h.html</link><description>```cpp
// C++ includes used for precompiling -*- C++ -*-
// Copyright (C) 2003-2014 Free Software Foundation, Inc. This file is part of the GNU ISO C++ Library.  This library is free// software; you can redistribute it and/or modify it under the// terms of the GNU General Public License as published by the// Free Software Foundation; either version 3, or (at your option)// any later version.
// This library is distributed in the hope that it will be useful,// but WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the// GNU General Public License for more details.
// Under Section 7 of GPL version 3, you are granted additional// permissions described in the GCC Runtime Library Exception, version// 3.1, as published by the Free Software Foundation.
// You should have received a copy of the GNU General Public License and// a copy of the GCC Runtime Library Exception along with this program;// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see// &lt;http://www.gnu.org/licenses/&gt;.
/** @file stdc++.h *  This is an implementation file for a precompiled header. */
// 17.4.1.2 Headers
// C
#ifndef _GLIBCXX_NO_ASSERT
#include &lt;cassert&gt;
#endif
#include &lt;cctype&gt;
#include &lt;cerrno&gt;
#include &lt;cfloat&gt;
#include &lt;ciso646&gt;
#include &lt;climits&gt;
#include &lt;clocale&gt;
#include &lt;cmath&gt;
#include &lt;csetjmp&gt;
#include &lt;csignal&gt;
#include &lt;cstdarg&gt;
#include &lt;cstddef&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;ctime&gt;

#if __cplusplus &gt;= 201103L
#include &lt;ccomplex&gt;
#include &lt;cfenv&gt;
#include &lt;cinttypes&gt;
#include &lt;cstdalign&gt;
#include &lt;cstdbool&gt;
#include &lt;cstdint&gt;
#include &lt;ctgmath&gt;
#include &lt;cwchar&gt;
#include &lt;cwctype&gt;
#endif

// C++
#include &lt;algorithm&gt;
#include &lt;bitset&gt;
#include &lt;complex&gt;
#include &lt;deque&gt;
#include &lt;exception&gt;
#include &lt;fstream&gt;
#include &lt;functional&gt;
#include &lt;iomanip&gt;
#include &lt;ios&gt;
#include &lt;iosfwd&gt;
#include &lt;iostream&gt;
#include &lt;istream&gt;
#include &lt;iterator&gt;
#include &lt;limits&gt;
#include &lt;list&gt;
#include &lt;locale&gt;
#include &lt;map&gt;
#include &lt;memory&gt;
#include &lt;new&gt;
#include &lt;numeric&gt;
#include &lt;ostream&gt;
#include &lt;queue&gt;
#include &lt;set&gt;
#include &lt;sstream&gt;
#include &lt;stack&gt;
#include &lt;stdexcept&gt;
#include &lt;streambuf&gt;
#include &lt;string&gt;
#include &lt;typeinfo&gt;
#include &lt;utility&gt;
#include &lt;valarray&gt;
#include &lt;vector&gt;

#if __cplusplus &gt;= 201103L
#include &lt;array&gt;
#include &lt;atomic&gt;
#include &lt;chrono&gt;
#include &lt;condition_variable&gt;
#include &lt;forward_list&gt;
#include &lt;future&gt;
#include &lt;initializer_list&gt;
#include &lt;mutex&gt;
#include &lt;random&gt;
#include &lt;ratio&gt;
#include &lt;regex&gt;
#include &lt;scoped_allocator&gt;
#include &lt;system_error&gt;
#include &lt;thread&gt;
#include &lt;tuple&gt;
#include &lt;typeindex&gt;
#include &lt;type_traits&gt;
#include &lt;unordered_map&gt;
#include &lt;unordered_set&gt;
#endif
```
。</description><guid isPermaLink="true">https://sssuer77.github.io/post/bits-stdc%2B%2B.h.html</guid><pubDate>Tue, 11 Mar 2025 02:19:18 +0000</pubDate></item><item><title>拓扑排序</title><link>https://sssuer77.github.io/post/tuo-pu-pai-xu.html</link><description># 拓扑排序（Topo sort）
对DAG（有向无环图）拓扑排序，非DAG不存在拓扑排序的说法。</description><guid isPermaLink="true">https://sssuer77.github.io/post/tuo-pu-pai-xu.html</guid><pubDate>Mon, 10 Mar 2025 09:50:29 +0000</pubDate></item><item><title>最小生成树</title><link>https://sssuer77.github.io/post/zui-xiao-sheng-cheng-shu.html</link><description># Kruskal （克鲁斯卡尔）算法（加边法）
时间复杂度O(mlog(m)),用并查集维护
模板代码
```cpp
#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
const int inf=0x3f3f3f3f;
const int maxn=2e5+10;;
struct node {
    int x,y,z;
}edge[maxn];


bool cmp(node a,node b) {
    return a.z &lt; b.z;
}

	
int fa[maxn];
int n,m;
int u,v,w; 
long long sum;

int Find(int x) {
    return x == fa[x] ? x : fa[x] = Find(fa[x]);
}

void solve() {
	// Kruskal 算法求最小生成树 
    cin&gt;&gt;n&gt;&gt;m;
	
    for(int i = 1; i &lt;= m; i ++) {
        cin&gt;&gt;edge[i].x&gt;&gt;edge[i].y&gt;&gt;edge[i].z;
    }
    for(int i = 0; i &lt;= n; i ++) {
        fa[i] = i;
    }
    sort(edge + 1,edge + 1 + m,cmp);
    // 每次加入一条最短的边
    for(int i = 1; i &lt;= m; i ++) {
        int x = Find(edge[i].x);
        int y = Find(edge[i].y);
        if(x == y) continue;
        fa[y] = x;
        sum += edge[i].z;
    }
    int ans = 0;
    for(int i = 1; i &lt;= n; i ++) {
        if(i == fa[i]) ans ++;
    }
    if(ans &gt; 1) puts('impossible');
    else printf('%lld\n',sum);


}

signed main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t = 1;
	cin &gt;&gt; t;
    // cout&lt;&lt;'YES';
	while (t--) {
        // init();
		solve();
	}
	return 0;
}
```

# prim（普里姆）算法（加点法）
此处是暴力prim，复杂度达到O(n^2+m)
```cpp
#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
const int inf=0x3f3f3f3f;
const int maxn=505;;
int a[maxn][maxn];
	
int vis[maxn],dist[maxn];

int n,m;

int u,v,w;

long long sum = 0;

int prim(int pos) {
    dist[pos] = 0;
    // 一共有 n 个点,就需要 遍历 n 次,每次寻找一个权值最小的点,记录其下标
    for(int i = 1; i &lt;= n; i ++) {
        int cur = -1;
        for(int j = 1; j &lt;= n; j ++) {
            if(!vis[j] &amp;&amp; (cur == -1 || dist[j] &lt; dist[cur])) {
                cur = j;
            }
        }
        // 这里需要提前终止
        if(dist[cur] &gt;= inf) return inf;
        sum += dist[cur];
        vis[cur] = 1;
        for(int k = 1; k &lt;= n; k ++) {
            // 只更新还没有找到的最小权值
            if(!vis[k]) dist[k] = min(dist[k],a[cur][k]);
        }
    }
    return sum;
}

void solve() {
	// prim 算法求最小生成树 
	
    cin&gt;&gt;n&gt;&gt;m;
    memset(a,0x3f,sizeof(a));
    memset(dist,0x3f,sizeof(dist));
    for(int i = 1; i &lt;= m; i ++) {
        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;
        a[u][v] = min(a[u][v],w);
        a[v][u] = min(a[v][u],w);
    }
    int value = prim(1);
    if(value &gt;= inf) puts('impossible');
    else printf('%lld\n',sum);

}

signed main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t = 1;
	cin &gt;&gt; t;
    // cout&lt;&lt;'YES';
	while (t--) {
        // init();
		solve();
	}
	return 0;
}
```

。</description><guid isPermaLink="true">https://sssuer77.github.io/post/zui-xiao-sheng-cheng-shu.html</guid><pubDate>Mon, 10 Mar 2025 09:31:38 +0000</pubDate></item><item><title>种类并查集/拓展域并查集</title><link>https://sssuer77.github.io/post/zhong-lei-bing-cha-ji---tuo-zhan-yu-bing-cha-ji.html</link><description>&lt;a href='https://www.cnblogs.com/Eleven-Qian-Shan/p/13154721.html' target='_blank'&gt;
参考博客
&lt;/a&gt;
。</description><guid isPermaLink="true">https://sssuer77.github.io/post/zhong-lei-bing-cha-ji---tuo-zhan-yu-bing-cha-ji.html</guid><pubDate>Thu, 06 Mar 2025 07:34:43 +0000</pubDate></item><item><title>离散化</title><link>https://sssuer77.github.io/post/li-san-hua.html</link><description># 离散化
今日做题时，偶遇巨大数据，拼尽全力无法ac，才明白用map离散化被卡了，看来是不得不学一下了。</description><guid isPermaLink="true">https://sssuer77.github.io/post/li-san-hua.html</guid><pubDate>Thu, 06 Mar 2025 07:17:37 +0000</pubDate></item><item><title>ST表</title><link>https://sssuer77.github.io/post/ST-biao.html</link><description>动态规划思想，倍增，nlogn复杂度
```cpp
#include &lt;bits/stdc++.h&gt;
using namespace std;
#define MaxN 100002
int f[MaxN][22];
int N, M;
inline int read() {
    int x = 0, f = 1;
    char ch = getchar();

    while (ch &lt; '0' || ch &gt; '9') {
        if (ch == '-')
            f = -1;

        ch = getchar();
    }

    while (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {
        x = x * 10 + ch - 48;
        ch = getchar();
    }

    return x * f;
}
int main() {
    scanf('%d%d', &amp;N, &amp;M);

    for (int i = 1; i &lt;= N; i++) {
        f[i][0] = read();
    }

    //更新f数组
    for (int i = 1; i &lt; 22; i++) {
        for (int j = 1; j + (1 &lt;&lt; i) - 1 &lt;= N; j++) {
            f[j][i] = max(f[j][i - 1], f[j + (1 &lt;&lt; (i - 1))][i - 1]);
        }
    }

    //打印答案
    for (int i = 0; i &lt; M; i++) {
        int l = read();
        int r = read();
        int s = __lg(r - l + 1);
        printf('%d\n', max(f[l][s], f[r - (1 &lt;&lt; s) + 1][s]));
    }

    return 0;
}
```。</description><guid isPermaLink="true">https://sssuer77.github.io/post/ST-biao.html</guid><pubDate>Fri, 21 Feb 2025 05:46:04 +0000</pubDate></item><item><title>mp4转gif</title><link>https://sssuer77.github.io/post/mp4-zhuan-gif.html</link><description>tutieshi.com/video/。</description><guid isPermaLink="true">https://sssuer77.github.io/post/mp4-zhuan-gif.html</guid><pubDate>Fri, 20 Dec 2024 10:43:07 +0000</pubDate></item><item><title>前端自学</title><link>https://sssuer77.github.io/post/qian-duan-zi-xue.html</link><description>HTML5,CSS3,移动端布局&#13;
JavaScript&#13;
Ajax-node&#13;
Vue&#13;
做点项目&#13;
。</description><guid isPermaLink="true">https://sssuer77.github.io/post/qian-duan-zi-xue.html</guid><pubDate>Sat, 19 Oct 2024 11:44:23 +0000</pubDate></item><item><title>重生之我是前端高手</title><link>https://sssuer77.github.io/post/zhong-sheng-zhi-wo-shi-qian-duan-gao-shou.html</link><description>&lt;h2&gt;（标题）既然没XCPC打，学学技术吧。</description><guid isPermaLink="true">https://sssuer77.github.io/post/zhong-sheng-zhi-wo-shi-qian-duan-gao-shou.html</guid><pubDate>Wed, 09 Oct 2024 06:04:44 +0000</pubDate></item><item><title>平衡三进制</title><link>https://sssuer77.github.io/post/ping-heng-san-jin-zhi.html</link><description>有一些奇妙例题奇妙应用，特点是题面里会出现3^x这样的标志，这种情况应该考虑平衡三进制了。</description><guid isPermaLink="true">https://sssuer77.github.io/post/ping-heng-san-jin-zhi.html</guid><pubDate>Mon, 23 Sep 2024 04:27:39 +0000</pubDate></item><item><title>树状数组</title><link>https://sssuer77.github.io/post/shu-zhuang-shu-zu.html</link><description>## 可以解决什么问题？&#13;
+ 单点修改，区间查询&#13;
+ 区间修改，单点查询&#13;
+ 区间修改，区间查询（建议写线段树好了）&#13;
## 有什么优势？&#13;
和线段树相比，优势在于代码量少，常数也较小，对于一些简单问题，可以几分钟写一个树状数组，杀鸡焉用牛刀。</description><guid isPermaLink="true">https://sssuer77.github.io/post/shu-zhuang-shu-zu.html</guid><pubDate>Mon, 23 Sep 2024 03:32:22 +0000</pubDate></item><item><title>如何在网页中超链接文字？</title><link>https://sssuer77.github.io/post/ru-he-zai-wang-ye-zhong-chao-lian-jie-wen-zi-%EF%BC%9F.html</link><description>在网页中超链接文字很简单，打上 &lt;a&gt;  &lt;/a&gt;标签就好啦&#13;
```cpp&#13;
&lt;a href='sssuer77.github.io' target='_blank'&gt;&#13;
ssuer77的个人博客&#13;
&lt;/a&gt;&#13;
```&#13;
href=''内部填写链接网址&#13;
target=''：有以下属性：&#13;
+ _blank：浏览器总在一个新打开、未命名的窗口中载入目标文档。</description><guid isPermaLink="true">https://sssuer77.github.io/post/ru-he-zai-wang-ye-zhong-chao-lian-jie-wen-zi-%EF%BC%9F.html</guid><pubDate>Thu, 12 Sep 2024 04:11:33 +0000</pubDate></item><item><title>范德蒙德卷积</title><link>https://sssuer77.github.io/post/fan-de-meng-de-juan-ji.html</link><description>几个公式，组合数学相关，略去证明，记得加进板子里就行。</description><guid isPermaLink="true">https://sssuer77.github.io/post/fan-de-meng-de-juan-ji.html</guid><pubDate>Thu, 12 Sep 2024 03:59:27 +0000</pubDate></item><item><title>字符串哈希</title><link>https://sssuer77.github.io/post/zi-fu-chuan-ha-xi.html</link><description>哈希大法，用空间换时间的典例，此前已经学习过，今日写一篇博客记录一下。</description><guid isPermaLink="true">https://sssuer77.github.io/post/zi-fu-chuan-ha-xi.html</guid><pubDate>Wed, 11 Sep 2024 05:52:55 +0000</pubDate></item><item><title>并查集</title><link>https://sssuer77.github.io/post/bing-cha-ji.html</link><description>## 并查集是什么&#13;
并查集是用来管理元素分组的算法。</description><guid isPermaLink="true">https://sssuer77.github.io/post/bing-cha-ji.html</guid><pubDate>Wed, 04 Sep 2024 08:01:38 +0000</pubDate></item><item><title>字典树（Trie）</title><link>https://sssuer77.github.io/post/zi-dian-shu-%EF%BC%88Trie%EF%BC%89.html</link><description># 字典树（Trie）详解&#13;
## 字典树的概念&#13;
![a047c079f3f271668ec60fcf98c79ae](https://github.com/user-attachments/assets/85cf4d7e-a7b3-4706-8e3e-25a96cf70186)&#13;
&#13;
将字符串以字典方式存储，建成一棵字典树，每个节点都是一个字母，是一种高效存储查询字符串的数据结构。</description><guid isPermaLink="true">https://sssuer77.github.io/post/zi-dian-shu-%EF%BC%88Trie%EF%BC%89.html</guid><pubDate>Wed, 04 Sep 2024 04:12:13 +0000</pubDate></item><item><title>__int128怎么用？</title><link>https://sssuer77.github.io/post/__int128-zen-me-yong-%EF%BC%9F.html</link><description>由于__int128不在C++标准里，因此没有配套的cin,cout,scanf,printf能使用，必须要手写，个人倾向于改动快读快写的板子来使用，其实就是把数据类型改一下（偷懒）。</description><guid isPermaLink="true">https://sssuer77.github.io/post/__int128-zen-me-yong-%EF%BC%9F.html</guid><pubDate>Tue, 03 Sep 2024 10:41:14 +0000</pubDate></item><item><title>Markdown语法一篇通</title><link>https://sssuer77.github.io/post/Markdown-yu-fa-yi-pian-tong.html</link><description>https://blog.csdn.net/qq_40818172/article/details/126260661。</description><guid isPermaLink="true">https://sssuer77.github.io/post/Markdown-yu-fa-yi-pian-tong.html</guid><pubDate>Tue, 03 Sep 2024 10:33:14 +0000</pubDate></item><item><title>D. Maximize the Root（Educational Codeforces Round 168 (Rated for Div. 2)）</title><link>https://sssuer77.github.io/post/D.%20Maximize%20the%20Root%EF%BC%88Educational%20Codeforces%20Round%20168%20%28Rated%20for%20Div.%202%29%EF%BC%89.html</link><description>题目链接：https://codeforces.com/problemset/problem/1997/D&#13;
这道题刚开始想从叶子节点开始向根方向搜索，很难写，状态不好存，遂看了几篇题解，选择了树形dp的做法。</description><guid isPermaLink="true">https://sssuer77.github.io/post/D.%20Maximize%20the%20Root%EF%BC%88Educational%20Codeforces%20Round%20168%20%28Rated%20for%20Div.%202%29%EF%BC%89.html</guid><pubDate>Tue, 03 Sep 2024 10:30:59 +0000</pubDate></item><item><title>链式前向星</title><link>https://sssuer77.github.io/post/lian-shi-qian-xiang-xing.html</link><description># 链式前向星&#13;
&gt; 如果说邻接表是不好写但效率好，邻接矩阵是好写但效率低的话，前向星就是一个相对中庸的数据结构。</description><guid isPermaLink="true">https://sssuer77.github.io/post/lian-shi-qian-xiang-xing.html</guid><pubDate>Tue, 03 Sep 2024 05:39:38 +0000</pubDate></item><item><title>01分数规划</title><link>https://sssuer77.github.io/post/01-fen-shu-gui-hua.html</link><description># 01分数规划&#13;
很久以前学的，今天看到了又复习一遍。</description><guid isPermaLink="true">https://sssuer77.github.io/post/01-fen-shu-gui-hua.html</guid><pubDate>Tue, 03 Sep 2024 04:46:22 +0000</pubDate></item></channel></rss>