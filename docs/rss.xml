<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>ssuer77的博客</title><link>https://sssuer77.github.io</link><description>一个个人博客，记录学习。</description><copyright>ssuer77的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/178136927?v=4</url><title>avatar</title><link>https://sssuer77.github.io</link></image><lastBuildDate>Thu, 06 Mar 2025 07:35:17 +0000</lastBuildDate><managingEditor>ssuer77的博客</managingEditor><ttl>60</ttl><webMaster>ssuer77的博客</webMaster><item><title>种类并查集/拓展域并查集</title><link>https://sssuer77.github.io/post/zhong-lei-bing-cha-ji---tuo-zhan-yu-bing-cha-ji.html</link><description>&lt;a href='https://www.cnblogs.com/Eleven-Qian-Shan/p/13154721.html' target='_blank'&gt;
参考博客
&lt;/a&gt;
。</description><guid isPermaLink="true">https://sssuer77.github.io/post/zhong-lei-bing-cha-ji---tuo-zhan-yu-bing-cha-ji.html</guid><pubDate>Thu, 06 Mar 2025 07:34:43 +0000</pubDate></item><item><title>离散化</title><link>https://sssuer77.github.io/post/li-san-hua.html</link><description># 离散化
今日做题时，偶遇巨大数据，拼尽全力无法ac，才明白用map离散化被卡了，看来是不得不学一下了。</description><guid isPermaLink="true">https://sssuer77.github.io/post/li-san-hua.html</guid><pubDate>Thu, 06 Mar 2025 07:17:37 +0000</pubDate></item><item><title>ST表</title><link>https://sssuer77.github.io/post/ST-biao.html</link><description>动态规划思想，倍增，nlogn复杂度
```cpp
#include &lt;bits/stdc++.h&gt;
using namespace std;
#define MaxN 100002
int f[MaxN][22];
int N, M;
inline int read() {
    int x = 0, f = 1;
    char ch = getchar();

    while (ch &lt; '0' || ch &gt; '9') {
        if (ch == '-')
            f = -1;

        ch = getchar();
    }

    while (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {
        x = x * 10 + ch - 48;
        ch = getchar();
    }

    return x * f;
}
int main() {
    scanf('%d%d', &amp;N, &amp;M);

    for (int i = 1; i &lt;= N; i++) {
        f[i][0] = read();
    }

    //更新f数组
    for (int i = 1; i &lt; 22; i++) {
        for (int j = 1; j + (1 &lt;&lt; i) - 1 &lt;= N; j++) {
            f[j][i] = max(f[j][i - 1], f[j + (1 &lt;&lt; (i - 1))][i - 1]);
        }
    }

    //打印答案
    for (int i = 0; i &lt; M; i++) {
        int l = read();
        int r = read();
        int s = __lg(r - l + 1);
        printf('%d\n', max(f[l][s], f[r - (1 &lt;&lt; s) + 1][s]));
    }

    return 0;
}
```。</description><guid isPermaLink="true">https://sssuer77.github.io/post/ST-biao.html</guid><pubDate>Fri, 21 Feb 2025 05:46:04 +0000</pubDate></item><item><title>mp4转gif</title><link>https://sssuer77.github.io/post/mp4-zhuan-gif.html</link><description>tutieshi.com/video/。</description><guid isPermaLink="true">https://sssuer77.github.io/post/mp4-zhuan-gif.html</guid><pubDate>Fri, 20 Dec 2024 10:43:07 +0000</pubDate></item><item><title>前端自学</title><link>https://sssuer77.github.io/post/qian-duan-zi-xue.html</link><description>HTML5,CSS3,移动端布局&#13;
JavaScript&#13;
Ajax-node&#13;
Vue&#13;
做点项目&#13;
。</description><guid isPermaLink="true">https://sssuer77.github.io/post/qian-duan-zi-xue.html</guid><pubDate>Sat, 19 Oct 2024 11:44:23 +0000</pubDate></item><item><title>重生之我是前端高手</title><link>https://sssuer77.github.io/post/zhong-sheng-zhi-wo-shi-qian-duan-gao-shou.html</link><description>&lt;h2&gt;（标题）既然没XCPC打，学学技术吧。</description><guid isPermaLink="true">https://sssuer77.github.io/post/zhong-sheng-zhi-wo-shi-qian-duan-gao-shou.html</guid><pubDate>Wed, 09 Oct 2024 06:04:44 +0000</pubDate></item><item><title>平衡三进制</title><link>https://sssuer77.github.io/post/ping-heng-san-jin-zhi.html</link><description>有一些奇妙例题奇妙应用，特点是题面里会出现3^x这样的标志，这种情况应该考虑平衡三进制了。</description><guid isPermaLink="true">https://sssuer77.github.io/post/ping-heng-san-jin-zhi.html</guid><pubDate>Mon, 23 Sep 2024 04:27:39 +0000</pubDate></item><item><title>树状数组</title><link>https://sssuer77.github.io/post/shu-zhuang-shu-zu.html</link><description>## 可以解决什么问题？&#13;
+ 单点修改，区间查询&#13;
+ 区间修改，单点查询&#13;
+ 区间修改，区间查询（建议写线段树好了）&#13;
## 有什么优势？&#13;
和线段树相比，优势在于代码量少，常数也较小，对于一些简单问题，可以几分钟写一个树状数组，杀鸡焉用牛刀。</description><guid isPermaLink="true">https://sssuer77.github.io/post/shu-zhuang-shu-zu.html</guid><pubDate>Mon, 23 Sep 2024 03:32:22 +0000</pubDate></item><item><title>如何在网页中超链接文字？</title><link>https://sssuer77.github.io/post/ru-he-zai-wang-ye-zhong-chao-lian-jie-wen-zi-%EF%BC%9F.html</link><description>在网页中超链接文字很简单，打上 &lt;a&gt;  &lt;/a&gt;标签就好啦&#13;
```cpp&#13;
&lt;a href='sssuer77.github.io' target='_blank'&gt;&#13;
ssuer77的个人博客&#13;
&lt;/a&gt;&#13;
```&#13;
href=''内部填写链接网址&#13;
target=''：有以下属性：&#13;
+ _blank：浏览器总在一个新打开、未命名的窗口中载入目标文档。</description><guid isPermaLink="true">https://sssuer77.github.io/post/ru-he-zai-wang-ye-zhong-chao-lian-jie-wen-zi-%EF%BC%9F.html</guid><pubDate>Thu, 12 Sep 2024 04:11:33 +0000</pubDate></item><item><title>范德蒙德卷积</title><link>https://sssuer77.github.io/post/fan-de-meng-de-juan-ji.html</link><description>几个公式，组合数学相关，略去证明，记得加进板子里就行。</description><guid isPermaLink="true">https://sssuer77.github.io/post/fan-de-meng-de-juan-ji.html</guid><pubDate>Thu, 12 Sep 2024 03:59:27 +0000</pubDate></item><item><title>字符串哈希</title><link>https://sssuer77.github.io/post/zi-fu-chuan-ha-xi.html</link><description>哈希大法，用空间换时间的典例，此前已经学习过，今日写一篇博客记录一下。</description><guid isPermaLink="true">https://sssuer77.github.io/post/zi-fu-chuan-ha-xi.html</guid><pubDate>Wed, 11 Sep 2024 05:52:55 +0000</pubDate></item><item><title>并查集</title><link>https://sssuer77.github.io/post/bing-cha-ji.html</link><description>## 并查集是什么&#13;
并查集是用来管理元素分组的算法。</description><guid isPermaLink="true">https://sssuer77.github.io/post/bing-cha-ji.html</guid><pubDate>Wed, 04 Sep 2024 08:01:38 +0000</pubDate></item><item><title>字典树（Trie）</title><link>https://sssuer77.github.io/post/zi-dian-shu-%EF%BC%88Trie%EF%BC%89.html</link><description># 字典树（Trie）详解&#13;
## 字典树的概念&#13;
![a047c079f3f271668ec60fcf98c79ae](https://github.com/user-attachments/assets/85cf4d7e-a7b3-4706-8e3e-25a96cf70186)&#13;
&#13;
将字符串以字典方式存储，建成一棵字典树，每个节点都是一个字母，是一种高效存储查询字符串的数据结构。</description><guid isPermaLink="true">https://sssuer77.github.io/post/zi-dian-shu-%EF%BC%88Trie%EF%BC%89.html</guid><pubDate>Wed, 04 Sep 2024 04:12:13 +0000</pubDate></item><item><title>__int128怎么用？</title><link>https://sssuer77.github.io/post/__int128-zen-me-yong-%EF%BC%9F.html</link><description>由于__int128不在C++标准里，因此没有配套的cin,cout,scanf,printf能使用，必须要手写，个人倾向于改动快读快写的板子来使用，其实就是把数据类型改一下（偷懒）。</description><guid isPermaLink="true">https://sssuer77.github.io/post/__int128-zen-me-yong-%EF%BC%9F.html</guid><pubDate>Tue, 03 Sep 2024 10:41:14 +0000</pubDate></item><item><title>Markdown语法一篇通</title><link>https://sssuer77.github.io/post/Markdown-yu-fa-yi-pian-tong.html</link><description>https://blog.csdn.net/qq_40818172/article/details/126260661。</description><guid isPermaLink="true">https://sssuer77.github.io/post/Markdown-yu-fa-yi-pian-tong.html</guid><pubDate>Tue, 03 Sep 2024 10:33:14 +0000</pubDate></item><item><title>D. Maximize the Root（Educational Codeforces Round 168 (Rated for Div. 2)）</title><link>https://sssuer77.github.io/post/D.%20Maximize%20the%20Root%EF%BC%88Educational%20Codeforces%20Round%20168%20%28Rated%20for%20Div.%202%29%EF%BC%89.html</link><description>题目链接：https://codeforces.com/problemset/problem/1997/D&#13;
这道题刚开始想从叶子节点开始向根方向搜索，很难写，状态不好存，遂看了几篇题解，选择了树形dp的做法。</description><guid isPermaLink="true">https://sssuer77.github.io/post/D.%20Maximize%20the%20Root%EF%BC%88Educational%20Codeforces%20Round%20168%20%28Rated%20for%20Div.%202%29%EF%BC%89.html</guid><pubDate>Tue, 03 Sep 2024 10:30:59 +0000</pubDate></item><item><title>链式前向星</title><link>https://sssuer77.github.io/post/lian-shi-qian-xiang-xing.html</link><description># 链式前向星&#13;
&gt; 如果说邻接表是不好写但效率好，邻接矩阵是好写但效率低的话，前向星就是一个相对中庸的数据结构。</description><guid isPermaLink="true">https://sssuer77.github.io/post/lian-shi-qian-xiang-xing.html</guid><pubDate>Tue, 03 Sep 2024 05:39:38 +0000</pubDate></item><item><title>01分数规划</title><link>https://sssuer77.github.io/post/01-fen-shu-gui-hua.html</link><description># 01分数规划&#13;
很久以前学的，今天看到了又复习一遍。</description><guid isPermaLink="true">https://sssuer77.github.io/post/01-fen-shu-gui-hua.html</guid><pubDate>Tue, 03 Sep 2024 04:46:22 +0000</pubDate></item></channel></rss>